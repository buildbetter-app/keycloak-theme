{"version":3,"file":"useGetClassName-CwZW_X6q.js","sources":["../../node_modules/keycloakify/tools/useConstCallback.js","../../node_modules/keycloakify/tools/clsx.js","../../node_modules/keycloakify/lib/useGetClassName.js"],"sourcesContent":["import { useRef, useState } from \"react\";\n/** https://stackoverflow.com/questions/65890278/why-cant-usecallback-always-return-the-same-ref */\nexport function useConstCallback(callback) {\n    const callbackRef = useRef(null);\n    callbackRef.current = callback;\n    return useState(() => (...args) => callbackRef.current(...args))[0];\n}\n//# sourceMappingURL=useConstCallback.js.map","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nexport const clsx = (...args) => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null)\n            continue;\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                }\n                else {\n                    assert(!typeGuard(arg, false));\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n//# sourceMappingURL=clsx.js.map","import { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"../tools/useConstCallback\";\nexport function createUseClassName(params) {\n    const { defaultClasses } = params;\n    function useGetClassName(params) {\n        const { classes } = params;\n        const getClassName = useConstCallback((classKey) => {\n            return clsx(classKey, defaultClasses[classKey], classes === null || classes === void 0 ? void 0 : classes[classKey]);\n        });\n        return { getClassName };\n    }\n    return { useGetClassName };\n}\n//# sourceMappingURL=useGetClassName.js.map"],"names":["useConstCallback","callback","callbackRef","useRef","useState","args","clsx","len","i","cls","arg","toAdd","assert","typeGuard","k","createUseClassName","params","defaultClasses","useGetClassName","classes","classKey"],"mappings":"sDAEO,SAASA,EAAiBC,EAAU,CACvC,MAAMC,EAAcC,SAAO,IAAI,EAC/B,OAAAD,EAAY,QAAUD,EACfG,EAAQ,SAAC,IAAM,IAAIC,IAASH,EAAY,QAAQ,GAAGG,CAAI,CAAC,EAAE,CAAC,CACtE,CCJY,MAACC,EAAO,IAAID,IAAS,CAC7B,MAAME,EAAMF,EAAK,OACjB,IAAIG,EAAI,EACJC,EAAM,GACV,KAAOD,EAAID,EAAKC,IAAK,CACjB,MAAME,EAAML,EAAKG,CAAC,EAClB,GAAIE,GAAO,KACP,SACJ,IAAIC,EACJ,OAAQ,OAAOD,EAAG,CACd,IAAK,UACD,MACJ,IAAK,SAAU,CACX,GAAI,MAAM,QAAQA,CAAG,EACjBC,EAAQL,EAAK,GAAGI,CAAG,MAElB,CACDE,EAAAA,OAAO,CAACC,EAAUH,EAAK,EAAK,CAAC,EAC7BC,EAAQ,GACR,UAAWG,KAAKJ,EACRA,EAAII,CAAC,GAAKA,IACVH,IAAUA,GAAS,KACnBA,GAASG,EAGpB,CACD,KACH,CACD,QACIH,EAAQD,CAEf,CACGC,IACAF,IAAQA,GAAO,KACfA,GAAOE,EAEd,CACD,OAAOF,CACX,ECtCO,SAASM,EAAmBC,EAAQ,CACvC,KAAM,CAAE,eAAAC,CAAgB,EAAGD,EAC3B,SAASE,EAAgBF,EAAQ,CAC7B,KAAM,CAAE,QAAAG,CAAS,EAAGH,EAIpB,MAAO,CAAE,aAHYhB,EAAkBoB,GAC5Bd,EAAKc,EAAUH,EAAeG,CAAQ,EAAGD,GAAY,KAA6B,OAASA,EAAQC,CAAQ,CAAC,CACtH,CACoB,CACxB,CACD,MAAO,CAAE,gBAAAF,CAAe,CAC5B","x_google_ignoreList":[0,1,2]}